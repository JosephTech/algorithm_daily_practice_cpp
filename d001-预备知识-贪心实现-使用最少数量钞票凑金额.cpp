/*
预备知识： 贪心法
	有1元、5元、10元、20元、100元、200元的钞票无穷多张。
	现使用这些钞票支付x元，最少需要多少张？

	例如： x = 628

	最佳支付方法：
	3张200， 1张20， 1张5， 3张1
	共8张
*/
/*
策略：
	尽可能选择面值较大的钞票

为什么一定是对的：
	任意面额都一定是比自己小的面额的倍数关系。
	当可以使用一张大面额钞票时，若想使用较小面额替换，一定需要更多的小面额钞票

思考： 假设增加7元面额时，贪心还成立吗？
	不成立，比如需要7块，需要14块。 用一两张就行了
	此时需要 动态规划解决这类问题。
*/
/*
贪心法：
	遵循某种规律，不断贪心的选取当前最优策略的算法设计方法
*/
#include <iostream>

int main() {
	const int cash[6] = { 200, 100, 20, 10, 5, 1 }; // 钞票。常量 整型 数组
	int X = 628; // 需要使用最少张数凑628元
	int count = 0; //记录张数

	for (int i = 0; i < 6; i++) {
		int num = X / cash[i]; // 优先用大钞。 向下取整
		X = X - num * cash[i]; // 还需要凑多少钱
		count = count + num;
		printf("用了%d张%d,", num, cash[i]);
		printf("还需凑%d元\n", X);
	}
	printf("总共%d张\n", count);
	
	system("pause");
	return 0;
}